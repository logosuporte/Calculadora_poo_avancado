unit Model.Calculadora;

interface

uses
  System.SysUtils, Model.Calculadora.interfaces, Model.Dividir,
  Model.Multiplicar, Model.Somar, Model.Subtrair,
  System.Generics.Collections;

type
  TCalculadora = class(TInterfacedObject,iCalculadora)
  private
    FLista :TList<Double>;
  public
    Constructor Create;
    Destructor Destroy; override;
    class function New:iCalculadora;
    function Add(Value:String):iCalculadora; overload;
    function Add(Value:Integer):iCalculadora; overload;
    function Add(Value:Currency):iCalculadora; overload;
    function Somar: iOperacoes;
    function Subtrair: iOperacoes;
    function Dividir: iOperacoes;
    function Multiplicar: iOperacoes;
  end;

implementation



{ TCalculadora }

function TCalculadora.Add(Value: String): iCalculadora;
begin
  Result := Self;
  FLista.Add(Value.ToDouble);
end;

function TCalculadora.Add(Value: Integer): iCalculadora;
begin
  Result := Self;
  FLista.Add(Value.ToDouble);
end;

function TCalculadora.Add(Value: Currency): iCalculadora;
begin
  Result := Self;
  FLista.Add(Value)
end;

constructor TCalculadora.Create;
begin
  FLista := TList<Double>.Create;
end;

destructor TCalculadora.Destroy;
begin
  FLista.Free;
  inherited;
end;

function TCalculadora.Dividir: iOperacoes;
begin
    Result := TDividir.New(FLista);
end;

function TCalculadora.Multiplicar: iOperacoes;
begin
    Result := TMultiplicar.New(FLista);
end;

class function TCalculadora.New: iCalculadora;
begin
  Result :=Self.Create;
end;

function TCalculadora.Somar: iOperacoes;
begin
  Result := TSomar.New(FLista);
end;

function TCalculadora.Subtrair:iOperacoes;
begin
  Result := Tsubtrair.New(FLista);
end;


end.
